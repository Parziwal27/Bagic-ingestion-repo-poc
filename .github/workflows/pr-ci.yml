name: PR Checks (auto-merge)

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

# Default to read-only; grant write only where needed
permissions:
  contents: read
  pull-requests: read

env:
  AWS_REGION: ap-south-1
  S3_BUCKET_DEV: ${{ secrets.S3_BUCKET_DEV }}

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate PR
    if: github.event_name == 'pull_request'
    runs-on: [self-hosted, Linux, X64]
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            ingestion:
              - 'dags/ingestion/**'

      - name: Show Python & pip (sanity)
        run: |
          which python3 || true
          python3 --version
          python3 -m pip --version

      - name: Install deps
        if: steps.changes.outputs.ingestion == 'true'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install flake8 pytest

      - name: Lint
        if: steps.changes.outputs.ingestion == 'true'
        run: python3 -m flake8 dags/ingestion

      - name: Run tests
        if: steps.changes.outputs.ingestion == 'true'
        run: python3 -m pytest -q

      - name: No ingestion changes
        if: steps.changes.outputs.ingestion != 'true'
        run: echo "No ingestion changes; CI passes by default."

  enable_auto_merge:
    name: Enable auto-merge
    # run only in base-repo context with write token; skip drafts/closed
    if: github.event_name == 'pull_request_target' && github.event.pull_request.state == 'open' && github.event.pull_request.draft == false
    runs-on: [self-hosted, Linux, X64]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Enable auto-merge now (waits for approval & required checks)
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');

            // Read repo merge settings (which methods allowed + auto-merge enabled)
            const data = await github.graphql(`
              query($owner:String!, $name:String!) {
                repository(owner:$owner, name:$name) {
                  id
                  autoMergeAllowed
                  squashMergeAllowed
                  mergeCommitAllowed
                  rebaseMergeAllowed
                }
              }`,
              { owner, name: repo }
            );

            const r = data.repository;
            if (!r.autoMergeAllowed) {
              core.warning('Repo setting "Allow auto-merge" is OFF. Enable it in Settings â†’ Pull requests.');
              return;
            }

            // Choose an allowed merge method, prefer SQUASH
            let method = 'SQUASH';
            if (!r.squashMergeAllowed) {
              if (r.mergeCommitAllowed) method = 'MERGE';
              else if (r.rebaseMergeAllowed) method = 'REBASE';
              else {
                core.warning('No merge methods are enabled on this repository.');
                return;
              }
            }

            if (pr.state !== 'open') { core.info(`PR is ${pr.state}; skipping.`); return; }
            if (pr.draft) { core.info('PR is draft; skipping.'); return; }

            try {
              await github.graphql(`
                mutation($prId: ID!, $method: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: { pullRequestId: $prId, mergeMethod: $method }) {
                    clientMutationId
                  }
                }`,
                { prId: pr.node_id, method }
              );
              core.notice(`Auto-merge enabled with ${method}. GitHub will merge after required checks & approvals.`);
            } catch (e) {
              core.warning('Could not enable auto-merge: ' + e.message);
            }
