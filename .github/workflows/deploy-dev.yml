name: CI/CD Pipeline (PR auto-merge + deploy)

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write       # to enable auto-merge & create comments
  pull-requests: write

env:
  AWS_REGION: ap-south-1
  S3_BUCKET_DEV: ${{ secrets.S3_BUCKET_DEV }}

jobs:
  # ---------------------------
  # CI on PR: lint + tests
  # ---------------------------
  ci:
    name: Validate PR
    if: github.event_name == 'pull_request'
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v4

      # Detect file changes
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            ingestion:
              - 'dags/ingestion/**'

      - name: Show Python & pip (sanity)
        run: |
          which python3 || true
          python3 --version
          python3 -m pip --version

      # Run lint/tests only if ingestion changed
      - name: Install deps
        if: steps.changes.outputs.ingestion == 'true'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install flake8 pytest

      - name: Lint
        if: steps.changes.outputs.ingestion == 'true'
        run: python3 -m flake8 dags/ingestion

      - name: Run tests
        if: steps.changes.outputs.ingestion == 'true'
        run: python3 -m pytest -q

      # Mark job as passed when nothing relevant changed
      - name: No ingestion changes
        if: steps.changes.outputs.ingestion != 'true'
        run: echo "No ingestion changes; CI passes by default."

      # Post a friendly status comment when CI passes
      - name: CI passed — waiting for approval
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) return;
            const { owner, repo } = context.repo;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr.number,
              body: "✅ CI passed. ⏳ Waiting for review approval. Auto-merge will be enabled once approved."
            });

  # -------------------------------------------------------------------
  # Enable auto-merge after approval
  # -------------------------------------------------------------------
  enable-auto-merge:
    name: Enable auto-merge
    runs-on: [self-hosted, Linux, X64]
    # Only run after CI passes for PR events, or directly for review events
    needs: [ci]
    # This job should run when CI passes OR when a review is submitted
    if: |
      always() && 
      (needs.ci.result == 'success' || needs.ci.result == 'skipped') &&
      (github.event_name == 'pull_request' || 
       (github.event_name == 'pull_request_review' && github.event.review.state == 'approved'))
    steps:
      - name: Check for approvals and enable auto-merge
        uses: actions/github-script@v7
        with:
          script: |
            // Determine the PR based on event type
            const isPR = github.event_name === 'pull_request';
            const pr = isPR ? context.payload.pull_request : context.payload.review?.pull_request;
            
            if (!pr) {
              console.log('No PR found in context');
              return;
            }
            
            const { owner, repo } = context.repo;
            const pull_number = pr.number;
            
            // Fetch current reviews
            const reviews = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number,
              per_page: 100
            });
            
            const approvals = reviews.data.filter(r => r.state === "APPROVED");
            
            if (approvals.length < 1) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: "🕒 Auto-merge pending: waiting for at least **one approval**."
              });
              return;
            }
            
            // Try to enable auto-merge
            const mutation = `
              mutation($prId: ID!) {
                enablePullRequestAutoMerge(input: {
                  pullRequestId: $prId,
                  mergeMethod: SQUASH
                }) {
                  clientMutationId
                }
              }
            `;
            
            try {
              await github.graphql(mutation, { prId: pr.node_id });
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: "🤖 Auto-merge **enabled** (merge method: SQUASH). GitHub will merge automatically when all required checks are green."
              });
            } catch (e) {
              console.log('Auto-merge error:', e.message);
              
              // Only post comment if it's not already enabled
              if (!e.message.includes('already enabled')) {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pull_number,
                  body: "⚠️ Could not enable auto-merge automatically. Please click **Enable auto-merge** in the PR manually.\n\nError: " + e.message
                });
              }
            }

  # ------------------------------------
  # Deploy after PR is merged to main
  # ------------------------------------
  deploy:
    name: Deploy to Prod
    runs-on: [self-hosted, Linux, X64]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: AWS identity check
        run: aws sts get-caller-identity

      - name: Sync DAGs to S3
        run: |
          BUCKET=${{ env.S3_BUCKET_DEV }}
          echo "Deploying DAGs to s3://$BUCKET/dags1234/"
          aws s3 sync dags/ingestion "s3://$BUCKET/dags1234/" \
            --exclude "*" --include "*.py" \
            --delete --only-show-errors
